using Microsoft.CodeAnalysis;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace CardSourceGenerator
{
    [Generator]
    internal class SourceGenerator : IIncrementalGenerator
    {
        private const string YGOCards = nameof(YGOCards);
        private const string YGOCardName = nameof(YGOCardName);
        private const string YGOCard = nameof(YGOCard);

        private static string GetIdentifier(string name)
        {
            var identifier = new StringBuilder();
            identifier.Append("C_");

            foreach (var chr in name)
            {
                if (char.IsLetterOrDigit(chr))
                {
                    identifier.Append(chr);
                }
            }

            return identifier.ToString();
        }

        private static string GetName(string name)
        {
            var cardName = new StringBuilder();

            foreach (var chr in name)
            {
                if (chr == '"')
                {
                    cardName.Append('\\');
                    cardName.Append('"');
                }
                else if (chr == '\\')
                {
                    cardName.Append(@"\\");
                }
                else
                {
                    cardName.Append(chr);
                }
            }

            return cardName.ToString();
        }

        private static string CreateMappedNamesSourceCode(string className, IReadOnlyCollection<INamedYGOCard> cards)
        {
            var sb = new StringBuilder();
            sb.Append($@"// <auto-generated/>
// {DateTime.UtcNow}
using System.Collections.Generic;

namespace {nameof(CardSourceGenerator)}
{{
    public static partial class {YGOCards}
    {{
        private static {className} {className}Singleton {{ get; }} = new();

        private class {className}
        {{
            public {className}()
            {{");

            foreach (var card in cards)
            {
                var name = GetName(card.Name);
                sb.Append($"""

                _allCardNames.Add(new {YGOCards}.{YGOCardName}("{name}"));
                _allCardMap["{name}"] = new {YGOCards}.{YGOCardName}("{name}");
""");
            }

            sb.Append($@"
            }}
        }}
    }}
}}");
            return sb.ToString();
        }

        private static string CreateRawNamesSourceCode(IReadOnlyCollection<INamedYGOCard> cards)
        {
            var sb = new StringBuilder();
            sb.Append($@"// <auto-generated/>
// {DateTime.UtcNow}

namespace {nameof(CardSourceGenerator)}
{{
    public static partial class {YGOCards}
    {{");

            foreach (var card in cards)
            {
                var identifier = GetIdentifier(card.Name);
                var name = GetName(card.Name);

                sb.Append($@"
        public static {YGOCardName} {identifier} {{ get; }} = new {YGOCardName}(""{name}"");");
            }

            sb.Append(@"
    }
}");
            return sb.ToString();
        }

        private static string CreatePasscodesSourceCode(IReadOnlyCollection<INamedYGOCard> cards)
        {
            var sb = new StringBuilder();
            sb.Append($@"// <auto-generated/>
// {DateTime.UtcNow}

namespace {nameof(CardSourceGenerator)}
{{
    public static partial class {YGOCards}
    {{
        public static partial class Passcodes
        {{");

            foreach (var card in cards)
            {
                var identifier = GetIdentifier(card.Name);

                sb.Append($@"
            public const int {identifier} = {card.Passcode};");
            }

            sb.Append(@"
        }
    }
}");
            return sb.ToString();
        }

        private static string CreateCardDataCode()
        {
            var sb = new StringBuilder();

            sb.Append($@"// <auto-generated/>
// {DateTime.UtcNow}
#nullable enable
using System;
using System.Diagnostics;
using System.IO;
using System.Text.Json;
using System.Collections.Generic;

namespace {nameof(CardSourceGenerator)}
{{
    public static partial class {YGOCards}
    {{
        private static readonly HashSet<{YGOCards}.{YGOCardName}> _allCardNames = new HashSet<{YGOCards}.{YGOCardName}>();
        public static IReadOnlySet<{YGOCards}.{YGOCardName}> AllCardNames => _allCardNames;

        private static readonly Dictionary<string, {YGOCards}.{YGOCardName}> _allCardMap = new Dictionary<string, {YGOCards}.{YGOCardName}>();
        public static IReadOnlyDictionary<string, {YGOCards}.{YGOCardName}> CardNameMap => _allCardMap;

        [DebuggerDisplay(""{{Name}}"")]
        public readonly struct {YGOCardName} : IEquatable<{YGOCardName}>, IComparable<{YGOCardName}>
        {{
            public string Name {{ get; }} = string.Empty;

            public {YGOCardName}(string name)
            {{
                Name = name;
            }}

            public bool Equals({YGOCardName} other) => Name.Equals(other.Name, StringComparison.Ordinal);
            public override bool Equals(object? obj) => obj is {YGOCardName} other && Equals(other);
            public override int GetHashCode() => StringComparer.Ordinal.GetHashCode(Name);
            public static bool operator ==({YGOCardName} x, {YGOCardName} y) => x.Equals(y);
            public static bool operator !=({YGOCardName} x, {YGOCardName} y) => !(x == y);

            public int CompareTo({YGOCardName} other) => StringComparer.Ordinal.Compare(Name, other.Name);
            public static bool operator >({YGOCardName} x, {YGOCardName} y) => x.CompareTo(y) > 0;
            public static bool operator <({YGOCardName} x, {YGOCardName} y) => x.CompareTo(y) < 0;
            public static bool operator >=({YGOCardName} x, {YGOCardName} y) => x.CompareTo(y) >= 0;
            public static bool operator <=({YGOCardName} x, {YGOCardName} y) => x.CompareTo(y) <= 0;
        }}

        public enum StartingDeckLocation
        {{
            MainDeck = 0,
            ExtraDeck = 1,
        }}

        public interface IYGOCard
        {{
            {YGOCards}.{YGOCardName} Name {{ get; }}
            string Passcode {{ get; }}
            StartingDeckLocation StartingLocation {{ get; }}
            string Description {{ get; }}
            int? Level {{ get; }}
            int? AttackPoints {{ get; }}
            int? DefensePoints {{ get; }}
            string? MonsterType {{ get; }}
            string? MonsterAttribute {{ get; }}
        }}

        private sealed class YGOProCard : IYGOCard
        {{
            public {YGOCards}.{YGOCardName} Name {{ get; }}
            public StartingDeckLocation StartingLocation {{ get; }}
            public string Passcode {{ get; }} = string.Empty;
            public string Description {{ get; }} = string.Empty;
            public int? Level {{ get; }}
            public int? AttackPoints {{ get; }}
            public int? DefensePoints {{ get; }}
            public string? MonsterType {{ get; }}
            public string? MonsterAttribute {{ get; }}

            public YGOProCard(JsonElement element)
            {{
                {{
                    if (!element.TryGetProperty(""name"", out var el))
                    {{
                        throw new Exception(""name not found"");
                    }}

                    var name = el.GetString() ?? throw new Exception(""name not a string"");

                    if(!{YGOCards}.CardNameMap.TryGetValue(name, out var cardName))
                    {{
                        throw new Exception(""{YGOCardName} not found"");
                    }}

                    Name = cardName;
                }}

                {{
                    if (!element.TryGetProperty(""type"", out var el))
                    {{
                        throw new Exception(""type not found"");
                    }}

                    var cardType = el.GetString() ?? throw new Exception(""type not a string"");
                    StartingLocation = DetermineStartingLocation(cardType);
                }}

                {{
                    if (element.TryGetProperty(""level"", out var el))
                    {{
                        Level = GetAtkOrDef(el);
                    }}
                }}

                {{
                    if (element.TryGetProperty(""id"", out var el))
                    {{
                        Passcode = el.GetString() ?? throw new Exception(""id not a string"");
                    }}
                }}

                {{
                    if (element.TryGetProperty(""desc"", out var el))
                    {{
                        Description = el.GetString() ?? throw new Exception(""desc not a string"");
                    }}
                }}

                {{
                    if (element.TryGetProperty(""atk"", out var el))
                    {{
                        AttackPoints = GetAtkOrDef(el);
                    }}
                }}

                {{
                    if (element.TryGetProperty(""def"", out var el))
                    {{
                        DefensePoints = GetAtkOrDef(el);
                    }}

                }}

                {{
                    if (element.TryGetProperty(""race"", out var el))
                    {{
                        MonsterType = el.GetString() ?? throw new Exception(""type not a string"");
                    }}
                }}

                {{
                    if (element.TryGetProperty(""attribute"", out var el))
                    {{
                        MonsterAttribute = el.GetString() ?? throw new Exception(""attribute not a string"");
                    }}
                }}
            }}

            private static int? GetAtkOrDef(JsonElement element)
            {{
                return element.ValueKind switch
                {{
                    JsonValueKind.Null => null,
                    JsonValueKind.Number => element.GetInt32(),
                    _ => throw new InvalidOperationException(element.GetRawText())
                }};
            }}
        }}

        private sealed class YGOProData
        {{
            public IReadOnlyList<IYGOCard> Data {{ get; }} = Array.Empty<IYGOCard>();

            public YGOProData(JsonElement element)
            {{
                var list = new List<IYGOCard>();
                Data = list;

                if (!element.TryGetProperty(""data"", out var el))
                {{
                    throw new Exception(""data not found"");
                }}

                foreach (var obj in el.EnumerateArray())
                {{
                    list.Add(new YGOProCard(obj));
                }}
            }}
        }}

        private static StartingDeckLocation DetermineStartingLocation(string location)
        {{
            var span = location.AsSpan();
            var fusion = ""fusion"".AsSpan();
            var synchro = ""synchro"".AsSpan();
            var xyz = ""xyz"".AsSpan();
            var link = ""link"".AsSpan();

            if (span.Contains(fusion, StringComparison.OrdinalIgnoreCase))
            {{
                return StartingDeckLocation.ExtraDeck;
            }}

            if (span.Contains(synchro, StringComparison.OrdinalIgnoreCase))
            {{
                return StartingDeckLocation.ExtraDeck;
            }}

            if (span.Contains(xyz, StringComparison.OrdinalIgnoreCase))
            {{
                return StartingDeckLocation.ExtraDeck;
            }}

            if (span.Contains(link, StringComparison.OrdinalIgnoreCase))
            {{
                return StartingDeckLocation.ExtraDeck;
            }}

            return StartingDeckLocation.MainDeck;
        }}

        public static IReadOnlyList<IYGOCard> LoadCardDataFromYgoPro(string path)
        {{
            using var stream = new FileStream(path, FileMode.Open, FileAccess.Read, FileShare.Read);
            using var document = JsonDocument.Parse(stream);
            return new YGOProData(document.RootElement).Data;
        }}

        public static IReadOnlyDictionary<{YGOCards}.{YGOCardName}, IYGOCard> LoadAllCardDataFromYgoPro(IEnumerable<string> paths)
        {{
            var cardData = new Dictionary<{YGOCards}.{YGOCardName}, IYGOCard>();

            foreach (var path in paths)
            {{
                var list = LoadCardDataFromYgoPro(path);

                foreach (var card in list)
                {{
                    cardData[card.Name] = card;
                }}
            }}

            return cardData;
        }}
    }}
}}");

            return sb.ToString();
        }

        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            var textFiles = context.AdditionalTextsProvider.Where(file => file.Path.EndsWith(".json"));

            var contents = textFiles.Select((text, cancellationToken) => (Name: Path.GetFileNameWithoutExtension(text.Path), Text: text.GetText(cancellationToken)!.ToString()));
            
            context.RegisterSourceOutput(contents, (spc, data) =>
            {
                var cards = new HashSet<INamedYGOCard>(YGOProData.GetCardData(data.Text));

                spc.AddSource($"{YGOCards}.Names.{data.Name}.g.cs", CreateRawNamesSourceCode(cards));
                spc.AddSource($"{YGOCards}.Passcodes.{data.Name}.g.cs", CreatePasscodesSourceCode(cards));
                spc.AddSource($"{YGOCards}.MappedNames.{data.Name}.g.cs", CreateMappedNamesSourceCode(GetIdentifier(data.Name), cards));
            });
            context.RegisterPostInitializationOutput(spc => spc.AddSource($"{YGOCards}.CardData.g.cs", CreateCardDataCode()));
        }
    }
}
